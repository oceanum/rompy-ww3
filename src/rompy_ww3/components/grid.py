"""Grid component for WW3 configuration."""

from typing import Optional
from ..namelists.spectrum import Spectrum
from ..namelists.run import Run
from ..namelists.timesteps import Timesteps
from ..namelists.depth import Depth
from ..namelists.mask import Mask
from ..namelists.obstacle import Obstacle
from ..namelists.slope import Slope
from ..namelists.sediment import Sediment
from ..namelists.inbound import InboundCount, InboundPointList
from ..namelists.excluded import ExcludedCount, ExcludedPointList, ExcludedBodyList
from ..namelists.outbound import OutboundCount, OutboundLineList
from ..namelists.curv import Curv
from ..namelists.unst import Unst
from ..namelists.smc import Smc
from ..namelists.grid import Grid, Rect
from .basemodel import WW3ComponentBaseModel


class GridComponent(WW3ComponentBaseModel):
    """Component for ww3_grid.nml containing grid configuration."""

    spectrum: Optional[Spectrum] = None
    run: Optional[Run] = None
    timesteps: Optional[Timesteps] = None
    depth: Optional[Depth] = None
    mask: Optional[Mask] = None
    obstacle: Optional[Obstacle] = None
    slope: Optional[Slope] = None
    sediment: Optional[Sediment] = None
    inbound_count: Optional[InboundCount] = None
    inbound_points: Optional[InboundPointList] = None
    excluded_count: Optional[ExcludedCount] = None
    excluded_points: Optional[ExcludedPointList] = None
    excluded_bodies: Optional[ExcludedBodyList] = None
    outbound_count: Optional[OutboundCount] = None
    outbound_lines: Optional[OutboundLineList] = None
    curv: Optional[Curv] = None
    unst: Optional[Unst] = None
    smc: Optional[Smc] = None
    grid_nml: Optional[Grid] = None
    rect_nml: Optional[Rect] = None

    # def render(self) -> str:
    #     """Render the grid component as a combined namelist string."""
    #     grid_content = []
    #     grid_content.append("! WW3 grid preprocessing configuration")
    #     grid_content.append("! Generated by rompy-ww3")
    #     grid_content.append("")
    #
    #     # Add GRID_NML
    #     if self.grid_nml:
    #         rendered = self.grid_nml.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     # Add RECT_NML
    #     if self.rect_nml:
    #         rendered = self.rect_nml.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     # Add SPECTRUM_NML
    #     if self.spectrum:
    #         rendered = self.spectrum.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     # Add RUN_NML
    #     if self.run:
    #         rendered = self.run.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     # Add TIMESTEPS_NML
    #     if self.timesteps:
    #         rendered = self.timesteps.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     # Add optional depth-related namelists
    #     if self.depth:
    #         rendered = self.depth.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.mask:
    #         rendered = self.mask.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.obstacle:
    #         rendered = self.obstacle.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.slope:
    #         rendered = self.slope.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.sediment:
    #         rendered = self.sediment.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     # Add inbound boundary point namelists
    #     if self.inbound_count:
    #         rendered = self.inbound_count.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.inbound_points:
    #         rendered = self.inbound_points.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     # Add excluded point and body namelists
    #     if self.excluded_count:
    #         rendered = self.excluded_count.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.excluded_points:
    #         rendered = self.excluded_points.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.excluded_bodies:
    #         rendered = self.excluded_bodies.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     # Add outbound boundary line namelists
    #     if self.outbound_count:
    #         rendered = self.outbound_count.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.outbound_lines:
    #         rendered = self.outbound_lines.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     # Add additional grid type specific namelists
    #     if self.curv:
    #         rendered = self.curv.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.unst:
    #         rendered = self.unst.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     if self.smc:
    #         rendered = self.smc.render().replace("\\n", "\n")
    #         grid_content.extend(rendered.split("\n"))
    #         grid_content.append("")
    #
    #     return "\n".join(grid_content)
