"""Multi-component for WW3 multi-grid configuration."""

from typing import Optional, List
from ..namelists.domain import Domain
from ..namelists.input import InputGrid, ModelGrid
from ..namelists.output_type import OutputType
from ..namelists.output_date import OutputDate
from ..namelists.homogeneous import HomogCount
from .basemodel import WW3ComponentBaseModel


class MultiComponent(WW3ComponentBaseModel):
    """Component for ww3_multi.nml containing multi-grid configuration."""

    domain: Optional[Domain] = None
    input_grid: Optional[InputGrid] = None
    model_grid: Optional[ModelGrid] = None
    model_grids: Optional[List[ModelGrid]] = None
    output_type: Optional[OutputType] = None
    output_date: Optional[OutputDate] = None
    homog_count: Optional[HomogCount] = None

    def render(self) -> str:
        """Render the multi-grid component as a combined namelist string."""
        multi_content = []
        multi_content.append("! WW3 multi-grid model configuration")
        multi_content.append("! Generated by rompy-ww3")
        multi_content.append("")

        # Add DOMAIN_NML (for multi-grid specific parameters)
        if self.domain:
            rendered = self.domain.render().replace("\\n", "\n")
            multi_content.extend(rendered.split("\n"))
            multi_content.append("")

        # Add INPUT_GRID_NML if defined
        if self.input_grid:
            rendered = self.input_grid.render().replace("\\n", "\n")
            multi_content.extend(rendered.split("\n"))
            multi_content.append("")
        elif self.model_grids:  # If we have model grids but no specific input grid
            for i, model_grid in enumerate(self.model_grids):
                # Assuming each model grid has corresponding input
                if model_grid.name:
                    input_grid_nml = f"&INPUT_GRID_NML\n  INPUT({i + 1})%NAME = '{model_grid.name}'\n/\n"
                    multi_content.append(input_grid_nml)
                    multi_content.append("")

        # Add MODEL_GRID_NML configurations
        if self.model_grids:
            for i, model_grid in enumerate(self.model_grids):
                rendered = model_grid.render().replace("\\n", "\n")
                # Replace the namelist name to be MODEL_GRID_NML instead of whatever is in the render
                lines = rendered.split("\n")
                updated_lines = []
                for line in lines:
                    if line.strip().startswith("&"):
                        updated_lines.append("&MODEL_GRID_NML")
                    elif line.strip() == "/":
                        updated_lines.append(
                            f"  MODEL_NAME = '{model_grid.name}'  ! Index: {i + 1}"
                        )
                        updated_lines.append("/")
                    else:
                        # Need to update the fields to use the proper indexed format
                        updated_line = line.replace("MODEL%", f"MODEL({i + 1})%")
                        updated_lines.append(updated_line)
                multi_content.extend(updated_lines)
                multi_content.append("")
        elif self.model_grid:  # Single model grid
            rendered = self.model_grid.render().replace("\\n", "\n")
            # Replace the namelist name and fields to use proper indexed format
            lines = rendered.split("\n")
            updated_lines = []
            for line in lines:
                if line.strip().startswith("&"):
                    updated_lines.append("&MODEL_GRID_NML")
                elif line.strip() == "/":
                    updated_lines.append(
                        f"  MODEL_NAME = '{self.model_grid.name}'  ! Index: 1"
                    )
                    updated_lines.append("/")
                else:
                    updated_line = line.replace("MODEL%", "MODEL(1)%")
                    updated_lines.append(updated_line)
            multi_content.extend(updated_lines)
            multi_content.append("")

        # Add OUTPUT_TYPE_NML
        if self.output_type:
            rendered = self.output_type.render().replace("\\n", "\n")
            multi_content.extend(rendered.split("\n"))
            multi_content.append("")

        # Add OUTPUT_DATE_NML
        if self.output_date:
            rendered = self.output_date.render().replace("\\n", "\n")
            multi_content.extend(rendered.split("\n"))
            multi_content.append("")

        # Add HOMOG_COUNT_NML if needed for multi-grid
        if self.homog_count:
            rendered = self.homog_count.render().replace("\\n", "\n")
            multi_content.extend(rendered.split("\n"))
            multi_content.append("")

        return "\n".join(multi_content)
