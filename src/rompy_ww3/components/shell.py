"""Shell component for WW3 configuration."""

from typing import List, Optional
from ..namelists.domain import Domain
from ..namelists.input import InputForcing
from ..namelists.output_type import OutputType
from ..namelists.output_date import OutputDate
from ..namelists.homogeneous import HomogCount, HomogInput
from .basemodel import WW3ComponentBaseModel


class ShellComponent(WW3ComponentBaseModel):
    """Component for ww3_shel.nml containing shell configuration."""

    domain: Optional[Domain] = None
    input_nml: Optional[InputForcing] = None
    output_type: Optional[OutputType] = None
    output_date: Optional[OutputDate] = None
    homog_count: Optional[HomogCount] = None
    homog_input: Optional[List[HomogInput]] = None

    def render(self) -> str:
        """Render the shell component as a combined namelist string."""
        shel_content = []

        # Add DOMAIN_NML
        if self.domain:
            rendered = self.domain.render().replace("\\n", "\n")
            shel_content.extend(rendered.split("\n"))
            shel_content.append("")

        # Add INPUT_NML
        if self.input_nml:
            rendered = self.input_nml.render().replace("\\n", "\n")
            shel_content.extend(rendered.split("\n"))
            shel_content.append("")

        # Add OUTPUT_TYPE_NML
        if self.output_type:
            rendered = self.output_type.render().replace("\\n", "\n")
            shel_content.extend(rendered.split("\n"))
            shel_content.append("")

        # Add OUTPUT_DATE_NML
        if self.output_date:
            rendered = self.output_date.render().replace("\\n", "\n")
            shel_content.extend(rendered.split("\n"))
            shel_content.append("")

        # Add HOMOG_COUNT_NML
        if self.homog_count:
            rendered = self.homog_count.render().replace("\\n", "\n")
            shel_content.extend(rendered.split("\n"))
            shel_content.append("")

        # Add HOMOG_INPUT_NML
        if self.homog_input:
            homog_input_content = "! Generated by rompy-ww3\n&HOMOG_INPUT_NML\n"
            for i, homog_input in enumerate(self.homog_input, 1):
                if homog_input.name:
                    homog_input_content += (
                        f"  HOMOG_INPUT({i})%NAME   = '{homog_input.name}'\n"
                    )
                if homog_input.date:
                    homog_input_content += (
                        f"  HOMOG_INPUT({i})%DATE   = '{homog_input.date}'\n"
                    )
                if homog_input.value1 is not None:
                    homog_input_content += (
                        f"  HOMOG_INPUT({i})%VALUE1 = {homog_input.value1}\n"
                    )
                if homog_input.value2 is not None:
                    homog_input_content += (
                        f"  HOMOG_INPUT({i})%VALUE2 = {homog_input.value2}\n"
                    )
                if homog_input.value3 is not None:
                    homog_input_content += (
                        f"  HOMOG_INPUT({i})%VALUE3 = {homog_input.value3}\n"
                    )
                homog_input_content += "\n"
            homog_input_content += "/\n"
            shel_content.extend(homog_input_content.split("\n"))
            shel_content.append("")

        return "\n".join(shel_content)
