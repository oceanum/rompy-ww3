"""WW3 Rompy grid."""

import logging
from pathlib import Path
from typing import Literal, Optional
from pydantic import Field

from rompy.core.grid import BaseGrid, RegularGrid


logger = logging.getLogger(__name__)

HERE = Path(__file__).parent


class Grid(RegularGrid):
    """Ww3 grid class with WW3-specific parameters.

    This class extends the RegularGrid with WW3-specific grid parameters
    needed for wave model configuration.
    """

    model_type: Literal["ww3"] = Field(
        default="ww3",
        description="Model type discriminator",
    )
    
    # WW3 grid parameters
    name: Optional[str] = Field(
        default=None,
        description="Grid name for identification"
    )
    grid_type: Optional[str] = Field(
        default="RECT",
        description="Grid type: 'RECT' (rectilinear), 'CURV' (curvilinear), 'UNST' (unstructured)"
    )
    coordinate_system: Optional[str] = Field(
        default="SPHE",
        description="Coordinate system: 'SPHE' (spherical), 'CART' (cartesian)"
    )
    grid_closure: Optional[str] = Field(
        default="NONE",
        description="Grid closure: 'NONE', 'SMPL' (simple), 'TRPL' (tripole)"
    )
    zlim: Optional[float] = Field(
        default=-0.10,
        description="Minimum depth limit (meters)"
    )
    dmin: Optional[float] = Field(
        default=2.5,
        description="Minimum depth for wave propagation (meters)"
    )
    
    # Rectilinear grid parameters
    nx: Optional[int] = Field(
        default=None,
        description="Number of points along x-axis (for RECT grids)"
    )
    ny: Optional[int] = Field(
        default=None,
        description="Number of points along y-axis (for RECT grids)"
    )
    sx: Optional[float] = Field(
        default=None,
        description="Grid increment along x-axis (for RECT grids)"
    )
    sy: Optional[float] = Field(
        default=None,
        description="Grid increment along y-axis (for RECT grids)"
    )
    sf: Optional[float] = Field(
        default=None,
        description="Scaling factor for grid increments (for RECT grids)"
    )
    
    # Grid boundaries
    x0: Optional[float] = Field(
        default=None,
        description="Western boundary of the grid"
    )
    y0: Optional[float] = Field(
        default=None,
        description="Southern boundary of the grid"
    )
    x1: Optional[float] = Field(
        default=None,
        description="Eastern boundary of the grid"
    )
    y1: Optional[float] = Field(
        default=None,
        description="Northern boundary of the grid"
    )
    
    def generate_grid_nml(self) -> str:
        """Generate GRID_NML namelist content."""
        lines = []
        lines.append("! Generated by rompy-ww3")
        lines.append("&GRID_NML")
        
        if self.name:
            lines.append(f"  GRID%NAME              =  '{self.name}'")
        if self.grid_type:
            lines.append(f"  GRID%TYPE              =  '{self.grid_type}'")
        if self.coordinate_system:
            lines.append(f"  GRID%COORD             =  '{self.coordinate_system}'")
        if self.grid_closure:
            lines.append(f"  GRID%CLOS              =  '{self.grid_closure}'")
        if self.zlim is not None:
            lines.append(f"  GRID%ZLIM              =  {self.zlim}")
        if self.dmin is not None:
            lines.append(f"  GRID%DMIN              =  {self.dmin}")
            
        lines.append("/")
        return "\n".join(lines)
    
    def generate_rect_nml(self) -> str:
        """Generate RECT_NML namelist content."""
        lines = []
        lines.append("! Generated by rompy-ww3")
        lines.append("&RECT_NML")
        
        if self.nx is not None:
            lines.append(f"  RECT%NX                =  {self.nx}")
        if self.ny is not None:
            lines.append(f"  RECT%NY                =  {self.ny}")
        if self.sx is not None:
            lines.append(f"  RECT%SX                =  {self.sx}")
        if self.sy is not None:
            lines.append(f"  RECT%SY                =  {self.sy}")
        if self.sf is not None:
            lines.append(f"  RECT%SF                =  {self.sf}")
            
        lines.append("/")
        return "\n".join(lines)
    
    def write_grid_files(self, workdir: Path) -> None:
        """Write grid namelist files."""
        workdir.mkdir(parents=True, exist_ok=True)
        
        # Write GRID_NML
        grid_nml_content = self.generate_grid_nml()
        with open(workdir / "grid.nml", "w") as f:
            f.write(grid_nml_content)
            
        # Write RECT_NML if it's a rectilinear grid
        if self.grid_type == "RECT":
            rect_nml_content = self.generate_rect_nml()
            with open(workdir / "rect.nml", "w") as f:
                f.write(rect_nml_content)
                
        logger.info(f"Wrote grid files to {workdir}")
