"""GRID_NML and RECT_NML namelist implementation for WW3."""

from typing import Optional
from pydantic import Field
from .basemodel import NamelistBaseModel


class Grid(NamelistBaseModel):
    """GRID_NML namelist for WW3.

    Defines the grid to preprocess.
    """

    name: Optional[str] = Field(
        default=None, description="Grid name for identification"
    )
    nml: Optional[str] = Field(default=None, description="Namelist file name")
    type: Optional[str] = Field(
        default=None,
        description="Grid type: 'RECT' (rectilinear), 'CURV' (curvilinear), 'UNST' (unstructured)",
    )
    coord: Optional[str] = Field(
        default=None,
        description="Coordinate system: 'SPHE' (spherical), 'CART' (cartesian)",
    )
    clos: Optional[str] = Field(
        default=None,
        description="Grid closure: 'NONE', 'SMPL' (simple), 'TRPL' (tripole)",
    )
    zlim: Optional[float] = Field(
        default=-0.1, description="Minimum depth limit (meters)"
    )
    dmin: Optional[float] = Field(
        default=2.5, description="Minimum depth for wave propagation (meters)"
    )

    def render(self) -> str:
        """Render the namelist with proper formatting."""
        lines = ["! Generated by rompy-ww3", "&GRID_NML"]

        # Simple formatting - Fortran will read this correctly
        if self.name is not None:
            lines.append(f"  GRID%NAME              =  '{self.name}'")
        if self.nml is not None:
            lines.append(f"  GRID%NML               =  '{self.nml}'")
        if self.type is not None:
            lines.append(f"  GRID%TYPE              =  '{self.type}'")
        if self.coord is not None:
            lines.append(f"  GRID%COORD             =  '{self.coord}'")
        if self.clos is not None:
            lines.append(f"  GRID%CLOS              =  '{self.clos}'")
        if self.zlim is not None:
            # Simple float formatting - Fortran will read this correctly
            lines.append(f"  GRID%ZLIM              =  {self.zlim}")
        if self.dmin is not None:
            # Simple float formatting - Fortran will read this correctly
            lines.append(f"  GRID%DMIN              =  {self.dmin}")

        lines.append("/")
        return "\n".join(lines)


class Rect(NamelistBaseModel):
    """RECT_NML namelist for WW3.

    Defines the rectilinear grid type.
    """

    nx: Optional[int] = Field(default=None, description="Number of points along x-axis")
    ny: Optional[int] = Field(default=None, description="Number of points along y-axis")
    sx: Optional[float] = Field(default=None, description="Grid increment along x-axis")
    sy: Optional[float] = Field(default=None, description="Grid increment along y-axis")
    sf: Optional[float] = Field(
        default=None, description="Scaling division factor for x-y axis"
    )
    x0: Optional[float] = Field(
        default=None, description="X-coordinate of lower-left corner (deg)"
    )
    y0: Optional[float] = Field(
        default=None, description="Y-coordinate of lower-left corner (deg)"
    )
    sf0: Optional[float] = Field(
        default=None, description="Scaling division factor for x0,y0 coord"
    )

    def render(self) -> str:
        """Render the namelist with proper formatting."""
        lines = ["! Generated by rompy-ww3", "&RECT_NML"]

        # Simple formatting - Fortran will read this correctly
        if self.nx is not None:
            lines.append(f"  RECT%NX                =  {self.nx}")
        if self.ny is not None:
            lines.append(f"  RECT%NY                =  {self.ny}")
        if self.sx is not None:
            lines.append(f"  RECT%SX                =  {self.sx}")
        if self.sy is not None:
            lines.append(f"  RECT%SY                =  {self.sy}")
        if self.sf is not None:
            lines.append(f"  RECT%SF                =  {self.sf}")
        if self.x0 is not None:
            lines.append(f"  RECT%X0                =  {self.x0}")
        if self.y0 is not None:
            lines.append(f"  RECT%Y0                =  {self.y0}")
        if self.sf0 is not None:
            lines.append(f"  RECT%SF0               =  {self.sf0}")

        lines.append("/")
        return "\n".join(lines)
